apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'
apply plugin: 'me.tatarka.retrolambda'

android {

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    compileSdkVersion 24
    buildToolsVersion "25.0.0"

    def APP_ID_PREFIX = "com.allco.flickrsearch"

    defaultConfig {
        minSdkVersion 14
        targetSdkVersion 24
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }


    signingConfigs {
        release {
            storeFile file('src/main/app_release.keystore')
            // It is not good to have all the keys and passwords here.
            // On the real project the CI should take care of APK signing.
            // But lets keep it here just as an example.
            storePassword '123qwe123'
            keyAlias 'app_release'
            keyPassword '123qwe123'
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }



    flavorDimensions 'color'

    productFlavors
            {
                GreenColored
                        {
                            dimension 'color'
                            applicationId APP_ID_PREFIX + ".green"
                        }

                PurpleColored
                        {
                            dimension 'color'
                            applicationId APP_ID_PREFIX + ".purple"
                        }
            }


    sourceSets
            {
                String sharedTestSources = 'src/sharedTest/java'
                String sharedTestResources = 'src/sharedTest/resources'

                test {
                    java.srcDir sharedTestSources
                    resources.srcDirs sharedTestResources
                }

                androidTest {
                    java.srcDir sharedTestSources
                    resources.srcDirs sharedTestResources
                }

                def PATH_FLAVORS = 'src/'
                def path = PATH_FLAVORS + 'Green/';
                GreenColored
                        {
                            res.srcDirs = [path + 'res']
                            java.srcDirs = [path + 'java']
                            assets.srcDirs = [path + 'assets']
                        }

                path = PATH_FLAVORS + 'Purple/';
                PurpleColored
                        {
                            res.srcDirs = [path + 'res']
                            java.srcDirs = [path + 'java']
                            assets.srcDirs = [path + 'assets']
                        }

            }

    applicationVariants.all { variant ->
        boolean isRelease = variant.buildType.name.contains('release')
        String filename = ''

        for (def flavor : variant.productFlavors) {
            def name = flavor.name + '-'
            filename += name
        }

        filename += (isRelease ? 'release' : 'debug')

        variant.outputs.each { output ->
            changeOutputFilename(output, filename, variant.versionName)

            if (output.zipAlign) {
                changeOutputFilename(output, filename, variant.versionName)
            }
        }
    }
}

tasks.withType(Test) {
    testLogging {
        events "started", "passed", "skipped", "failed"
    }
}

def changeOutputFilename(outputTask, newNamePrefix, version) {
    def file = outputTask.outputFile

    def suffix = '-v' + version + '.apk'

    def newName = (file.name =~ /\.apk$/).replaceAll('').split('-').drop(4).join('-')
    if (newName.length() > 0) {
        newName = '-' + newName
    }

    newName = newNamePrefix + newName + suffix

    outputTask.outputFile = new File(file.parentFile, newName)
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    compile 'com.android.support:appcompat-v7:24.2.1'
    compile 'com.android.support:design:24.2.1'
    compile 'com.android.support:support-annotations:24.2.1'
    compile 'com.squareup.retrofit:retrofit:2.0.0-beta3'
    compile 'com.squareup.retrofit:converter-gson:2.0.0-beta2'

    compile 'com.google.dagger:dagger:2.7'
    apt 'com.google.dagger:dagger-compiler:2.7'

    compile 'com.squareup.picasso:picasso:2.5.2'
    compile 'com.nhaarman.listviewanimations:lib-core:3.1.0@aar'
    compile 'com.nineoldandroids:library:2.4.0'
    compile 'javax.inject:javax.inject:1'

    testCompile 'junit:junit:4.12'
    testCompile 'com.squareup.okhttp:mockwebserver:2.5.0'
    testCompile 'com.github.fabioCollini:DaggerMock:0.6.2'
    testCompile 'org.hamcrest:hamcrest-library:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-module-junit4:1.6.4'
    testCompile 'org.powermock:powermock-api-mockito:1.6.4'


    androidTestCompile 'com.android.support:appcompat-v7:24.2.1'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test:rules:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    androidTestCompile 'com.squareup.okhttp:mockwebserver:2.5.0'
    androidTestCompile 'com.github.fabioCollini:DaggerMock:0.6.2'


    androidTestCompile 'org.hamcrest:hamcrest-library:1.3'
    androidTestCompile 'org.mockito:mockito-core:1.10.19'
    androidTestCompile 'com.linkedin.dexmaker:dexmaker-mockito:2.2.0'
}
